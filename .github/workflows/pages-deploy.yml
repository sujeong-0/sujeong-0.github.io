name: "Build and Deploy"
on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - .gitignore
      - README.md
      - LICENSE

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  spellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Hunspell - Python 패키지 캐싱 (codespell 속도 향상)
        run: sudo apt-get install -y hunspell hunspell-en-us hunspell-ko

      - name: Cache Python Dependencies - Python 패키지 캐싱 (codespell 속도 향상)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Codespell - Codespell 설치 (캐싱된 패키지 활용)
        run: pip install --cache-dir ~/.cache/pip codespell

      - name: Run Hunspell Check with Suggestions - 맞춤법 검사 실행 & 오류 감지 (Hunspell)
        run: |
          find ./_posts -name "*.md" | xargs hunspell -d en_US,ko_KR -a > hunspell_output.txt
          cat hunspell_output.txt
          if grep -q '&' hunspell_output.txt; then
            echo "❌ 맞춤법 오류가 발견되었습니다. 게시가 차단됩니다."
            exit 1
          fi

      - name: Run Codespell - Codespell 실행
        run: |
          if [ -f "./ignored-words.txt" ]; then
            ERROR_COUNT=$(find _posts -name "*.md" | xargs codespell --ignore "./ignored-words.txt" | tee /dev/stderr | wc -l)
          else
            ERROR_COUNT=$(find _posts -name "*.md" | xargs codespell | tee /dev/stderr | wc -l)
          fi
          if [ "$ERROR_COUNT" -ne 0 ]; then
            echo "❌ 맞춤법 오류가 발견되었습니다. 게시가 차단됩니다."
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: spellcheck

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true

      - name: Build site
        run: bundle exec jekyll b -d "_site${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: "production"

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site${{ steps.pages.outputs.base_path }}"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
